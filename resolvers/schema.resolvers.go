package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/bertoxic/graphqlChat/graph"
	"github.com/bertoxic/graphqlChat/model"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePostInput, userID string, parentID *string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, postID string, input model.CreatePostInput) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, postID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// Repost is the resolver for the repost field.
func (r *mutationResolver) Repost(ctx context.Context, postID string, userID string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Repost - repost"))
}

// AddComment is the resolver for the addComment field.
func (r *mutationResolver) AddComment(ctx context.Context, postID string, input model.CreatePostInput, userID string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: AddComment - addComment"))
}

// LikePost is the resolver for the likePost field.
func (r *mutationResolver) LikePost(ctx context.Context, postID string, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: LikePost - likePost"))
}

// UnlikePost is the resolver for the unlikePost field.
func (r *mutationResolver) UnlikePost(ctx context.Context, postID string, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: UnlikePost - unlikePost"))
}

// TagUserInPost is the resolver for the tagUserInPost field.
func (r *mutationResolver) TagUserInPost(ctx context.Context, postID string, taggedUserID string) (bool, error) {
	panic(fmt.Errorf("not implemented: TagUserInPost - tagUserInPost"))
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUserByEmail - getUserByEmail"))
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, postID string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetPost - getPost"))
}

// AllUserPosts is the resolver for the allUserPosts field.
func (r *queryResolver) AllUserPosts(ctx context.Context, userID string) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetAllUserPosts - allUserPosts"))
}

// GetPostComments is the resolver for the getPostComments field.
func (r *queryResolver) GetPostComments(ctx context.Context, postID string) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetPostComments - getPostComments"))
}

// GetFeed is the resolver for the getFeed field.
func (r *queryResolver) GetFeed(ctx context.Context, userID string) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetUserFeed - getFeed"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
