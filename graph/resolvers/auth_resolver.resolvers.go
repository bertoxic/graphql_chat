package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"time"

	"github.com/bertoxic/graphqlChat/graph"
	"github.com/bertoxic/graphqlChat/graph/model"
	"github.com/bertoxic/graphqlChat/internal/models"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthResponse, error) {
	if r.AuthService == nil {
		return nil, fmt.Errorf("AuthService is not initialized")
	}

	fmt.Println("Starting registration process")

	authInput := models.RegistrationInput{
		Email:    input.Email,
		Username: input.Username,
		Password: input.Password,
	}

	fmt.Println("Calling AuthService.Register")

	result, err := r.AuthService.Register(ctx, authInput)
	if err != nil {
		fmt.Printf("Registration error: %v\n", err)
		return nil, buildBadRequestError(ctx, err)
	}

	fmt.Println("Registration successful")

	authResponse := &model.AuthResponse{
		AccessToken: result.AccessToken,
		User: &model.User{
			ID:        result.User.ID,
			Username:  result.User.UserName,
			Email:     result.User.Email,
			CreatedAt: time.Now(),
		},
	}

	return authResponse, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthResponse, error) {
	authInput := models.LoginInput{
		Email:    input.Email,
		Password: input.Password,
	}

	result, err := r.AuthService.Login(ctx, authInput)
	if err != nil {
		return nil, buildBadRequestError(ctx, err)
	}

	authResponse := &model.AuthResponse{
		AccessToken: result.AccessToken,
		User: &model.User{
			ID:        result.User.ID,
			Username:  result.User.UserName,
			Email:     result.User.Email,
			CreatedAt: time.Now(),
		},
	}

	return authResponse, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
