package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/bertoxic/graphqlChat/graph/model"
)

// MarkNotificationAsRead is the resolver for the markNotificationAsRead field.
func (r *mutationResolver) MarkNotificationAsRead(ctx context.Context, notificationID string) (bool, error) {
	err := r.UserService.MarkNotificationAsRead(ctx, notificationID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// MarkAllNotificationsAsRead is the resolver for the markAllNotificationsAsRead field.
func (r *mutationResolver) MarkAllNotificationsAsRead(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: MarkAllNotificationsAsRead - markAllNotificationsAsRead"))
}

// GetUserNotifications is the resolver for the getUserNotifications field.
func (r *queryResolver) GetUserNotifications(ctx context.Context, limit *int, offset *int) ([]*model.Notification, error) {
	l := 10 // default limit
	o := 0  // default offset
	if limit != nil {
		l = *limit
	}
	if offset != nil {
		o = *offset
	}

	currentUserID := getCurrentUserID(ctx)
	notifications, err := r.UserService.GetUserNotifications(ctx, currentUserID, l, o)
	if err != nil {
		return nil, err
	}

	var result []*model.Notification
	for _, notification := range notifications {
		result = append(result, &model.Notification{
			ID:        notification.ID,
			Type:      model.NotificationType(notification.Type),
			Content:   notification.Content,
			IsRead:    notification.IsRead,
			CreatedAt: notification.CreatedAt,
			// Add other fields as necessary
		})
	}

	return result, nil
}

// GetUnreadNotificationsCount is the resolver for the getUnreadNotificationsCount field.
func (r *queryResolver) GetUnreadNotificationsCount(ctx context.Context) (int, error) {
	//currentUserID := getCurrentUserID(ctx)
	//count, err := r.UserService.GetUnreadNotificationsCount(ctx, currentUserID)
	//if err != nil {
	//	return 0, err
	//}
	return 0, nil
}

// NewNotification is the resolver for the newNotification field.
func (r *subscriptionResolver) NewNotification(ctx context.Context) (<-chan *model.Notification, error) {
	//TODO implement me
	panic("implement me")
}
